{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 用于采样的曲线：y=2x**2 + x，然后分别用一次函数，二次函数，五次函数进行拟合。\n",
    "# 模型： 多项式\n",
    "# 损失函数： MSE\n",
    "# 算法：minibatch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0764740111514177, 0.8069204509609129]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "\n",
    "fig1 = plt.figure(1)\n",
    "ax = fig1.add_subplot(111)\n",
    "fig2 = plt.figure(2)\n",
    "bx = fig2.add_subplot(111)\n",
    "#####################################################################\n",
    "# 将图像移到坐标原点\n",
    "\n",
    "# ax.spines['right'].set_color('none')   # 将图像右边的轴设为透明\n",
    "# ax.spines['top'].set_color('none')     # 将图像上面的轴设为透明\n",
    "# ax.xaxis.set_ticks_position('bottom')    # 将x轴刻度设在下面的坐标轴上\n",
    "# ax.yaxis.set_ticks_position('left')         # 将y轴刻度设在左边的坐标轴上\n",
    "# ax.spines['bottom'].set_position(('data', 0))   # 将两个坐标轴的位置设在数据点原点\n",
    "# ax.spines['left'].set_position(('data', 0))\n",
    "# # plt.xticks(np.arange(-6, 6))\n",
    "# # plt.yticks(np.arange(-6, 6))\n",
    "# plt.axis('equal')\n",
    "######################################################################\n",
    "# 超参数定义\n",
    "e = 0.5       # 学习率\n",
    "m = 8         # minibatch大小\n",
    "n = 200       # 数据大小的一半\n",
    "EPS = 0.0001   # 精度\n",
    "c = 2         # 模型容量\n",
    "\n",
    "\n",
    "def generate(n):\n",
    "    # n: 数据大小的一半\n",
    "    w = 2\n",
    "    p = []  # point\n",
    "    # point = [[]]\n",
    "    for i in range(-n, n):\n",
    "        y_temp = w * i * i / (n * n) + i / n\n",
    "        if(i < 40 and i > -40):\n",
    "            y_temp = y_temp + 0.8 * y_temp * random.random() - 0.4 * y_temp\n",
    "        else:\n",
    "            y_temp = y_temp + 0.06 * y_temp * random.random() - 0.03 * y_temp\n",
    "        p.append([i / n, y_temp])\n",
    "    return p\n",
    "\n",
    "\n",
    "def draw_error(p):\n",
    "    # p: 产生的数据\n",
    "    x = []\n",
    "    y = []\n",
    "    for i in range(len(p)):\n",
    "        x.append(p[i][0])\n",
    "        y.append(p[i][1])\n",
    "        # ax.plot(p[i][0], p[i][1], \"ro\")\n",
    "    ax.plot(x, y)\n",
    "\n",
    "\n",
    "def draw_fit(p, w, n, c):\n",
    "    # p: 产生的数据\n",
    "    x = []\n",
    "    y = []\n",
    "    for i in range(len(p)):\n",
    "        bx.plot(p[i][0], p[i][1], \"ro\")\n",
    "\n",
    "    for i in range(-n, n):\n",
    "        x.append(i / n)\n",
    "        t = [0 for x in range(c + 1)]\n",
    "        y_sum = 0\n",
    "        for j in range(c + 1):\n",
    "            t[j] = w[j] * (i / n)**(c - j) + t[j]\n",
    "            y_sum = y_sum + t[j]\n",
    "        y.append(y_sum)\n",
    "    bx.plot(x, y)\n",
    "\n",
    "\n",
    "def gen_minibatch(p, m, n):\n",
    "    # p: 产生的数据\n",
    "    # m: minibatac大小\n",
    "    # n: 数据大小的一半\n",
    "\n",
    "    batch = []\n",
    "    for i in range(m):\n",
    "        j = random.randint(-0.9 * n, 0.9 * n)\n",
    "        batch.append(p[j])\n",
    "    return batch\n",
    "\n",
    "\n",
    "def gen_testbatch(p, m, n):\n",
    "    batch = []\n",
    "    for i in range(-n, int(-0.9 * n)):\n",
    "        batch.append(p[i])\n",
    "    for i in range(int(0.9 * n), n):\n",
    "        batch.append(p[i])\n",
    "    return batch\n",
    "\n",
    "\n",
    "def grad1(batch, w):\n",
    "    # batc：数据集\n",
    "    # w：参数向量\n",
    "    # print(len(batch))\n",
    "    # print(len(w))\n",
    "    # print(batch[0][0])\n",
    "    w0 = 0\n",
    "    w1 = 0\n",
    "    m = len(batch)\n",
    "    for i in range(m):\n",
    "        # batch是二维list，batch[i][0]是横坐标，batch[i][1]是y\n",
    "        temp = w[0] * batch[i][0] + w[1] - batch[i][1]\n",
    "        w1 = w1 + temp\n",
    "        w0 = w0 + temp * batch[i][0]\n",
    "        # print(batch[i])\n",
    "        # print(temp)\n",
    "        # print(w0, w1)\n",
    "        # print(\"========\")\n",
    "    grad_w = [w0 / m, w1 / m]  # 梯度\n",
    "    return grad_w\n",
    "\n",
    "\n",
    "def grad2(batch, w):\n",
    "    # batc：数据集\n",
    "    # w：参数向量\n",
    "    w0 = 0\n",
    "    w1 = 0\n",
    "    w2 = 0\n",
    "    m = len(batch)\n",
    "    for i in range(m):\n",
    "        temp = w[0] * batch[i][0] ** 2 + w[1] * batch[i][0] + w[2] - batch[i][1]\n",
    "        w2 = w2 + temp\n",
    "        w1 = w1 + temp * batch[i][0]\n",
    "        w0 = w0 + temp * (batch[i][0] ** 2)\n",
    "\n",
    "    grad_w = [w0 / m, w1 / m, w2 / m]\n",
    "    return grad_w\n",
    "\n",
    "\n",
    "def grad3(batch, w):\n",
    "    # batc：数据集\n",
    "    # w：参数向量\n",
    "    m = len(batch)\n",
    "    grad_w = [0, 0, 0, 0, 0, 0]\n",
    "    for i in range(m):\n",
    "        t4 = batch[i][0]  # x的1次方\n",
    "        t3 = t4 * t4  # x的2次方\n",
    "        t2 = t3 * t4  # x的3次方\n",
    "        t1 = t2 * t4  # x的4次方\n",
    "        t0 = t1 * t4  # x的5次方\n",
    "        temp = w[0] * t0 + w[1] * t1 + w[2] * t2 + w[3] * t3 + w[4] * t4 + w[5] - batch[i][1]\n",
    "\n",
    "        grad_w[5] = grad_w[5] + temp\n",
    "        grad_w[4] = grad_w[4] + temp * t4\n",
    "        grad_w[3] = grad_w[3] + temp * t3\n",
    "        grad_w[2] = grad_w[2] + temp * t2\n",
    "        grad_w[1] = grad_w[1] + temp * t1\n",
    "        grad_w[0] = grad_w[0] + temp * t0\n",
    "\n",
    "    grad_w = [x / m for x in grad_w]\n",
    "    return grad_w\n",
    "\n",
    "\n",
    "#  更新梯度，e为更新间隔\n",
    "def updata_w(e, w, grad_w):\n",
    "    # print(w)\n",
    "    for i in range(len(w)):\n",
    "        w[i] = w[i] - e * grad_w[i]\n",
    "\n",
    "    # print(w)\n",
    "    return w\n",
    "\n",
    "\n",
    "def eps1(batch, w):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    # temp = [0 for x in range(c + 1)]\n",
    "    for i in range(len(batch)):\n",
    "        y = w[0] * batch[i][0] + w[1]\n",
    "        # for j in range(c + 1):\n",
    "        #     # print(j)\n",
    "        #     # print(i)\n",
    "        #     temp[j] = w[j] * batch[i][0]**j\n",
    "\n",
    "        #     y = y + temp[j]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)\n",
    "\n",
    "\n",
    "def eps2(batch, w):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    # temp = [0 for x in range(c + 1)]\n",
    "    for i in range(len(batch)):\n",
    "        y = w[0] * batch[i][0]**2 + w[1] * batch[i][0] + w[2]\n",
    "        # for j in range(c + 1):\n",
    "        #     # print(j)\n",
    "        #     # print(i)\n",
    "        #     temp[j] = w[j] * batch[i][0]**j\n",
    "\n",
    "        #     y = y + temp[j]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)\n",
    "\n",
    "\n",
    "def eps3(batch, w):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    # temp = [0 for x in range(c + 1)]\n",
    "    for i in range(len(batch)):\n",
    "        y = w[0] * batch[i][0]**5 + w[1] * batch[i][0]**4 + \\\n",
    "            w[2] * batch[i][0]**3 + w[3] * batch[i][0]**2 + \\\n",
    "            w[4] * batch[i][0]**1 + w[5]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)          \n",
    "\n",
    "\n",
    "def eps(batch, w, c):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    for i in range(len(batch)):\n",
    "        temp = [0 for i in range(c + 1)]\n",
    "        for j in range(c + 1):\n",
    "            print(\"j:{}\".format(j))\n",
    "            print(\"i:{}\".format(i))\n",
    "            temp[j] = w[j] * batch[i][0]**(c - j)\n",
    "            y = y + temp[j]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)\n",
    "\n",
    "# 产生数据\n",
    "p = generate(n)\n",
    "testbatch = gen_testbatch(p, m, n)\n",
    "train_pic = []\n",
    "test_pic = []\n",
    "\n",
    "\n",
    "# 用线性拟合\n",
    "\n",
    "# 定义参数初值\n",
    "w = [0.5, 0.5]\n",
    "\n",
    "for i in range(1000):\n",
    "    # 产生minibatach\n",
    "    minibatch = gen_minibatch(p, m, n)\n",
    "    train_error = eps1(minibatch, w)\n",
    "    test_error = eps1(testbatch, w)\n",
    "    train_pic.append([i, 50 * train_error])\n",
    "    test_pic.append([i, 50 * test_error])\n",
    "    if(train_error < EPS):\n",
    "        break\n",
    "    # 求梯度\n",
    "    grad_w = grad1(minibatch, w)\n",
    "    # print(grad_w)\n",
    "    # 更新梯度\n",
    "    w = updata_w(e, w, grad_w)\n",
    "\n",
    "\n",
    "# 用二次函数\n",
    "# 定义参数初值\n",
    "# w = [0.5, 0.5, 0.5]\n",
    "\n",
    "# for i in range(1000):\n",
    "#     # 产生minibatach\n",
    "#     minibatch = gen_minibatch(p, m, n)\n",
    "#     train_error = eps2(minibatch, w)\n",
    "#     test_error = eps2(testbatch, w)\n",
    "#     train_pic.append([i, 50 * train_error])\n",
    "#     test_pic.append([i, 50 * test_error])\n",
    "#     # print(error)\n",
    "#     if(train_error < EPS):\n",
    "#         break\n",
    "#     # 求梯度\n",
    "#     grad_w = grad2(minibatch, w)\n",
    "#     # print(grad_w)\n",
    "#     # 更新梯度\n",
    "#     w = updata_w(e, w, grad_w)\n",
    "\n",
    "\n",
    "# 用五次函数\n",
    "# 定义参数初值\n",
    "# w = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n",
    "\n",
    "# for i in range(1000):\n",
    "#     # 产生minibatach\n",
    "#     minibatch = gen_minibatch(p, m, n)\n",
    "#     train_error = eps3(minibatch, w)\n",
    "#     test_error = eps3(testbatch, w)\n",
    "#     train_pic.append([i, 50 * train_error])\n",
    "#     test_pic.append([i, 50 * test_error])\n",
    "#     # print(error)\n",
    "#     if(train_error < EPS):\n",
    "#         break\n",
    "#     # 求梯度\n",
    "#     grad_w = grad3(minibatch, w)\n",
    "#     # print(grad_w)\n",
    "#     # 更新梯度\n",
    "#     w = updata_w(e, w, grad_w)\n",
    "\n",
    "# 输出最终拟合的w，从左到右降次排列\n",
    "print(w)\n",
    "# 画训练次数和误差大小关系图\n",
    "draw_error(train_pic)\n",
    "draw_error(test_pic)\n",
    "# plt.show()\n",
    "# 画拟合曲线\n",
    "\n",
    "draw_fit(p, w, n, 1)\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.9738618672712995, 0.9969348617776819, 0.009427161532874458]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nCkH/D+s0p5V3qUARAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "\n",
    "fig1 = plt.figure(1)\n",
    "ax = fig1.add_subplot(111)\n",
    "fig2 = plt.figure(2)\n",
    "bx = fig2.add_subplot(111)\n",
    "#####################################################################\n",
    "# 将图像移到坐标原点\n",
    "\n",
    "# ax.spines['right'].set_color('none')   # 将图像右边的轴设为透明\n",
    "# ax.spines['top'].set_color('none')     # 将图像上面的轴设为透明\n",
    "# ax.xaxis.set_ticks_position('bottom')    # 将x轴刻度设在下面的坐标轴上\n",
    "# ax.yaxis.set_ticks_position('left')         # 将y轴刻度设在左边的坐标轴上\n",
    "# ax.spines['bottom'].set_position(('data', 0))   # 将两个坐标轴的位置设在数据点原点\n",
    "# ax.spines['left'].set_position(('data', 0))\n",
    "# # plt.xticks(np.arange(-6, 6))\n",
    "# # plt.yticks(np.arange(-6, 6))\n",
    "# plt.axis('equal')\n",
    "######################################################################\n",
    "# 超参数定义\n",
    "e = 0.5       # 学习率\n",
    "m = 8         # minibatch大小\n",
    "n = 200       # 数据大小的一半\n",
    "EPS = 0.0001   # 精度\n",
    "c = 2         # 模型容量\n",
    "\n",
    "\n",
    "# 产生数据集\n",
    "def generate(n):\n",
    "    # n: 数据大小的一半\n",
    "    w = 2\n",
    "    p = []  # point\n",
    "    # point = [[]]\n",
    "    for i in range(-n, n):\n",
    "        y_temp = w * i * i / (n * n) + i / n\n",
    "        if(i < 40 and i > -40):\n",
    "            y_temp = y_temp + 0.8 * y_temp * random.random() - 0.4 * y_temp\n",
    "        else:\n",
    "            y_temp = y_temp + 0.06 * y_temp * random.random() - 0.03 * y_temp\n",
    "        p.append([i / n, y_temp])\n",
    "    return p\n",
    "\n",
    "\n",
    "# 绘制误差与训练次数曲线\n",
    "def draw_error(p):\n",
    "    # p: 产生的数据\n",
    "    x = []\n",
    "    y = []\n",
    "    for i in range(len(p)):\n",
    "        x.append(p[i][0])\n",
    "        y.append(p[i][1])\n",
    "        # ax.plot(p[i][0], p[i][1], \"ro\")\n",
    "    ax.plot(x, y)\n",
    "\n",
    "# 绘制拟合曲线\n",
    "def draw_fit(p, w, n, c):\n",
    "    # p: 产生的数据\n",
    "    x = []\n",
    "    y = []\n",
    "    for i in range(len(p)):\n",
    "        bx.plot(p[i][0], p[i][1], \"ro\")\n",
    "\n",
    "    for i in range(-n, n):\n",
    "        x.append(i / n)\n",
    "        t = [0 for x in range(c + 1)]\n",
    "        y_sum = 0\n",
    "        for j in range(c + 1):\n",
    "            t[j] = w[j] * (i / n)**(c - j) + t[j]\n",
    "            y_sum = y_sum + t[j]\n",
    "        y.append(y_sum)\n",
    "    bx.plot(x, y)\n",
    "\n",
    "# 产生minibatch\n",
    "def gen_minibatch(p, m, n):\n",
    "    # p: 产生的数据\n",
    "    # m: minibatac大小\n",
    "    # n: 数据大小的一半\n",
    "\n",
    "    batch = []\n",
    "    for i in range(m):\n",
    "        j = random.randint(-0.9 * n, 0.9 * n)\n",
    "        batch.append(p[j])\n",
    "    return batch\n",
    "\n",
    "# 产生测试数据\n",
    "def gen_testbatch(p, m, n):\n",
    "    batch = []\n",
    "    for i in range(-n, int(-0.9 * n)):\n",
    "        batch.append(p[i])\n",
    "    for i in range(int(0.9 * n), n):\n",
    "        batch.append(p[i])\n",
    "    return batch\n",
    "\n",
    "# 求得一次梯度，并返回梯度，但是不更新w\n",
    "\n",
    "# def grad(batch, w, c):\n",
    "#     grad_w = []\n",
    "#     for j in range(len(batch)):\n",
    "#         #   求J = 1/m*sum((y-yt)*x(i))\n",
    "#         #   先求y，再减yt，\n",
    "#         y = 0\n",
    "#         for i in range(c + 1):\n",
    "#             y = y + w[i] * batch[j][0]**i\n",
    "#         y = y - batch[j][1]\n",
    "\n",
    "\n",
    "# 求一次函数梯度\n",
    "def grad1(batch, w):\n",
    "    # batc：数据集\n",
    "    # w：参数向量\n",
    "    # print(len(batch))\n",
    "    # print(len(w))\n",
    "    # print(batch[0][0])\n",
    "    w0 = 0\n",
    "    w1 = 0\n",
    "    m = len(batch)\n",
    "    for i in range(m):\n",
    "        # batch是二维list，batch[i][0]是横坐标，batch[i][1]是y\n",
    "        temp = w[0] * batch[i][0] + w[1] - batch[i][1]\n",
    "        w1 = w1 + temp\n",
    "        w0 = w0 + temp * batch[i][0]\n",
    "        # print(batch[i])\n",
    "        # print(temp)\n",
    "        # print(w0, w1)\n",
    "        # print(\"========\")\n",
    "    grad_w = [w0 / m, w1 / m]  # 梯度\n",
    "    return grad_w\n",
    "\n",
    "# 求二次函数梯度\n",
    "def grad2(batch, w):\n",
    "    # batc：数据集\n",
    "    # w：参数向量\n",
    "    w0 = 0\n",
    "    w1 = 0\n",
    "    w2 = 0\n",
    "    m = len(batch)\n",
    "    for i in range(m):\n",
    "        temp = w[0] * batch[i][0] ** 2 + w[1] * batch[i][0] + w[2] - batch[i][1]\n",
    "        w2 = w2 + temp\n",
    "        w1 = w1 + temp * batch[i][0]\n",
    "        w0 = w0 + temp * (batch[i][0] ** 2)\n",
    "\n",
    "    grad_w = [w0 / m, w1 / m, w2 / m]\n",
    "    return grad_w\n",
    "\n",
    "# 求五次函数梯度\n",
    "def grad3(batch, w):\n",
    "    # batc：数据集\n",
    "    # w：参数向量\n",
    "    m = len(batch)\n",
    "    grad_w = [0, 0, 0, 0, 0, 0]\n",
    "    for i in range(m):\n",
    "        t4 = batch[i][0]  # x的1次方\n",
    "        t3 = t4 * t4  # x的2次方\n",
    "        t2 = t3 * t4  # x的3次方\n",
    "        t1 = t2 * t4  # x的4次方\n",
    "        t0 = t1 * t4  # x的5次方\n",
    "        temp = w[0] * t0 + w[1] * t1 + w[2] * t2 + w[3] * t3 + w[4] * t4 + w[5] - batch[i][1]\n",
    "\n",
    "        grad_w[5] = grad_w[5] + temp\n",
    "        grad_w[4] = grad_w[4] + temp * t4\n",
    "        grad_w[3] = grad_w[3] + temp * t3\n",
    "        grad_w[2] = grad_w[2] + temp * t2\n",
    "        grad_w[1] = grad_w[1] + temp * t1\n",
    "        grad_w[0] = grad_w[0] + temp * t0\n",
    "\n",
    "    grad_w = [x / m for x in grad_w]\n",
    "    return grad_w\n",
    "\n",
    "\n",
    "#  更新梯度，e为更新间隔\n",
    "def updata_w(e, w, grad_w):\n",
    "    # print(w)\n",
    "    for i in range(len(w)):\n",
    "        w[i] = w[i] - e * grad_w[i]\n",
    "\n",
    "    # print(w)\n",
    "    return w\n",
    "\n",
    "# 求一次函数损失函数值\n",
    "def eps1(batch, w):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    # temp = [0 for x in range(c + 1)]\n",
    "    for i in range(len(batch)):\n",
    "        y = w[0] * batch[i][0] + w[1]\n",
    "        # for j in range(c + 1):\n",
    "        #     # print(j)\n",
    "        #     # print(i)\n",
    "        #     temp[j] = w[j] * batch[i][0]**j\n",
    "\n",
    "        #     y = y + temp[j]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)\n",
    "\n",
    "# 求二次函数损失函数值\n",
    "def eps2(batch, w):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    # temp = [0 for x in range(c + 1)]\n",
    "    for i in range(len(batch)):\n",
    "        y = w[0] * batch[i][0]**2 + w[1] * batch[i][0] + w[2]\n",
    "        # for j in range(c + 1):\n",
    "        #     # print(j)\n",
    "        #     # print(i)\n",
    "        #     temp[j] = w[j] * batch[i][0]**j\n",
    "\n",
    "        #     y = y + temp[j]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)\n",
    "\n",
    "# 求五次函数损失函数值\n",
    "def eps3(batch, w):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    # temp = [0 for x in range(c + 1)]\n",
    "    for i in range(len(batch)):\n",
    "        y = w[0] * batch[i][0]**5 + w[1] * batch[i][0]**4 + \\\n",
    "            w[2] * batch[i][0]**3 + w[3] * batch[i][0]**2 + \\\n",
    "            w[4] * batch[i][0]**1 + w[5]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)          \n",
    "\n",
    "\n",
    "# def eps(batch, w, c):\n",
    "#     error = 0\n",
    "#     y = 0\n",
    "#     for i in range(len(batch)):\n",
    "#         temp = [0 for i in range(c + 1)]\n",
    "#         for j in range(c + 1):\n",
    "#             print(\"j:{}\".format(j))\n",
    "#             print(\"i:{}\".format(i))\n",
    "#             temp[j] = w[j] * batch[i][0]**(c - j)\n",
    "#             y = y + temp[j]\n",
    "#         error = error + (y - batch[i][1])**2\n",
    "#     return error / len(batch)\n",
    "\n",
    "# 产生数据\n",
    "p = generate(n)\n",
    "testbatch = gen_testbatch(p, m, n)\n",
    "train_pic = []\n",
    "test_pic = []\n",
    "\n",
    "# 用二次函数\n",
    "# 定义参数初值\n",
    "w = [0.5, 0.5, 0.5]\n",
    "\n",
    "for i in range(1000):\n",
    "    # 产生minibatach\n",
    "    minibatch = gen_minibatch(p, m, n)\n",
    "    train_error = eps2(minibatch, w)\n",
    "    test_error = eps2(testbatch, w)\n",
    "    train_pic.append([i, 50 * train_error])\n",
    "    test_pic.append([i, 50 * test_error])\n",
    "    # print(error)\n",
    "    if(train_error < EPS):\n",
    "        break\n",
    "    # 求梯度\n",
    "    grad_w = grad2(minibatch, w)\n",
    "    # print(grad_w)\n",
    "    # 更新梯度\n",
    "    w = updata_w(e, w, grad_w)\n",
    "\n",
    "\n",
    "# 用五次函数\n",
    "# 定义参数初值\n",
    "# w = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n",
    "\n",
    "# for i in range(1000):\n",
    "#     # 产生minibatach\n",
    "#     minibatch = gen_minibatch(p, m, n)\n",
    "#     train_error = eps3(minibatch, w)\n",
    "#     test_error = eps3(testbatch, w)\n",
    "#     train_pic.append([i, 50 * train_error])\n",
    "#     test_pic.append([i, 50 * test_error])\n",
    "#     # print(error)\n",
    "#     if(train_error < EPS):\n",
    "#         break\n",
    "#     # 求梯度\n",
    "#     grad_w = grad3(minibatch, w)\n",
    "#     # print(grad_w)\n",
    "#     # 更新梯度\n",
    "#     w = updata_w(e, w, grad_w)\n",
    "\n",
    "# 输出最终拟合的w，从左到右降次排列\n",
    "print(w)\n",
    "# 画训练次数和误差大小关系图\n",
    "draw_error(train_pic)\n",
    "draw_error(test_pic)\n",
    "# plt.show()\n",
    "# 画拟合曲线\n",
    "\n",
    "draw_fit(p, w, n, 2)\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.07156770571073057, 0.4718085776091949, 0.08530272101081184, 1.4544227299211003, 0.9702923414408453, 0.12185759904623503]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nOTz6+QpOPagrg7q1oXObZkxfkc3tYwYyfvpqBu/TjkHd29ChZVMKS31MXbqVx75YweO/HsrvXnM3\nxZh/12h+/cz3LNuSx4kDO3NE3w7kl/jo2b45q7MLGD/d9Q2cf3hPLjyyF3PX72TMwd34emU22/NL\n2bKrmGapKTz39Rp+c0w/BnZrQ+v0VCbN3VhRA4p24sAutE5P5b1AJ/PlR/XhxIFdWJ9TSO+OLfhw\n/mbe+DG0ENXwfh1o0TSV7u3Smbxgc0Vt8L9XHMGkuRt5b+5G7hw7iF3FZXy/ejtDe7Vn5trtHNS9\nLa/+EPuOUv07t+Lgfdry9crsmFd1fTq2YN320JXBfl1asWJrPmce0p2vlmVVeVvE8CagWJWCRHRt\nk86WXcUctE8bSsr8rMzK594zD6RXx5a8OyczogkjWOMNGju4G5PjNC3WVoumTSgq80WshDy0V7tA\nWfMoq+YOY7Gat+K58aT9+NeXK6v93nhG7ZcR0acUlNbE1Op7l2zeVdGEVW+stTX6Ac7FtZsHX18C\n/DtGvquBWcCsXr162WTy+fzW7/fX6zaWbd5ll2/ZVS/fXVrus1MWbbY+X/3uQzS/32/Lyn3WWmvL\nfX67NbcoZr4dBSU2J7+kRuXbWVhqc4tKrd/vt9+t2lbpO35Yvc2++eP6mJ8tKi23b/203m6JUa7M\nHYV2e35Jpf2Ipdzn3vf5/Da/uMwWlZZXmbe03FdRXmut3ZZXbP/3488xfzel5T7r9/ttdl6x3VVU\nWilP8DsKSsps1i6Xx+fz25z8Erts8y67OivPbsgpsH6/387fsMOu315QZbkKSspipgd/n9F//zsL\nS23mjkLr9/vtD6u3VXx+a26R3VlYWpGvuKzcbtxRWPFe8Hv8fr8tKfPZnMDvOKiotNx+uXRrRb5y\nn9+Wx/i7KC332bziMpudV2x9Pr8tKi23K7fmReTJKy6zHy/YZDfkFNidBaUVv09rrd2e7/7mysp9\nFeWr6n+8NHBsf1i9zX69ItvuLCi1WbuK7ax1ORXbjv5s9O/B7/fbDTkFdmHmTmutteu3F1TsW7nP\nb0sDf187C0Kf2ZJbZK98+Sc7f8OOmOVKBDDLJhCXG22Ti4hIY7EnxqH/BAwwxvQ1xjQFzgdi3J9M\nRET2hBq3oVtry40xvwem4IYtvmitXVxnJRMRkd1Sq4lF1tqPgY/jZhQRkXrn6an/IiISooAuItJI\nKKCLiDQSCugiIo2EArqISCOxR29wYYzJBmLPr46vE7Atbi5v0L40TNqXhkn7Ar2ttRnxMu3RgF4b\nxphZicyU8gLtS8OkfWmYtC+JU5OLiEgjoYAuItJIeCmgP5vsAtQh7UvDpH1pmLQvCfJMG7qIiFTP\nSzV0ERGphicCujHmFGPMcmPMKmPMrckuT3WMMT2NMV8ZY5YaYxYbY/4YSO9gjPncGLMy8Ng+kG6M\nMf8K7NsCY8yhyd2DyowxTYwxc40xkwOv+xpjZgb25c3A8skYY5oFXq8KvN8nmeWOZoxpZ4x5xxiz\nLHB8Rnj1uBhj/hz4+1pkjHnDGJPupeNijHnRGJNljFkUlrbbx8IYMy6Qf6UxZlwD2pd/Bv7OFhhj\n3jPGtAt777bAviw3xpwcll77OJfIXTCS+YNbmnc10A9oCswHBiW7XNWUtxtwaOB5a9yNtAcBDwG3\nBtJvBR4MPB8DfAIYYDgwM9n7EGOfbgBeByYHXr8FnB94Ph64JvD8WmB84Pn5wJvJLnvUfvwXuCrw\nvCnQzovHBXf7x7VA87DjcZmXjgswCjgUWBSWtlvHAugArAk8tg88b99A9mU0kBp4/mDYvgwKxLBm\nQN9AbGtSV3Eu6X+cCfyyRgBTwl7fBtyW7HLtRvnfB04ClgPdAmndgOWB588AF4Tlr8jXEH6AHsBU\n4HhgcuCfalvYH2vF8cGtjT8i8Dw1kM8kex8C5WkTCIImKt1zx4XQ/Xw7BH7Pk4GTvXZcgD5RQXC3\njgVwAfBMWHpEvmTuS9R7vwQmBJ5HxK/gsamrOOeFJpdYN6PeJ0ll2S2BS9uhwEygi7V2M0DgsXMg\nW0Pfv8eBm4HgHYw7AjuttcE7H4eXt2JfAu/nBvI3BP2AbOClQPPR88aYlnjwuFhrNwIPA+uBzbjf\n82y8eVzC7e6xaLDHKMoVuCsMqOd98UJANzHSGvzQHGNMK2Ai8Cdr7a7qssZIaxD7Z4wZC2RZa2eH\nJ8fIahN4L9lScZfFT1trhwIFuMv6qjTYfQm0LZ+Ju2TvDrQETo2R1QvHJRFVlb/B75cx5g6gHJgQ\nTIqRrc72xQsBPRPoGfa6B7ApSWVJiDEmDRfMJ1hr3w0kbzXGdAu83w3ICqQ35P07CjjDGLMO+B+u\n2eVxoJ0xJni3q/DyVuxL4P22QM6eLHA1MoFMa+3MwOt3cAHei8flRGCttTbbWlsGvAuMxJvHJdzu\nHouGfIwIdNKOBS6ygXYU6nlfvBDQPXUzamOMAV4AllprHw176wMg2As/Dte2Hky/NNCTPxzIDV52\nJpu19jZrbQ9rbR/c7/1La+1FwFfAOYFs0fsS3MdzAvkbRI3JWrsF2GCM2T+QdAKwBA8eF1xTy3Bj\nTIvA31twXzx3XKLs7rGYAow2xrQPXLWMDqQlnTHmFOAW4AxrbWHYWx8A5wdGHvUFBgA/UldxLtkd\nIwl2OIzBjRZZDdyR7PLEKevRuEulBcC8wM8YXJvlVGBl4LFDIL8B/hPYt4XAsGTvQxX7dRyhUS79\nAn+Eq4C3gWaB9PTA61WB9/slu9xR+3AIMCtwbCbhRkZ48rgA9wDLgEXAq7hRE545LsAbuPb/Mlzt\n9MqaHAtc+/SqwM/lDWhfVuHaxIMxYHxY/jsC+7IcODUsvdZxTjNFRUQaCS80uYiISAIU0EVEGgkF\ndBGRRkIBXUSkkVBAFxFpJBTQRUQaCQV0EZFGQgFdRKSR+H98FKFtFGIlbgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD8CAYAAACMwORRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzt3Xd4VFX6wPHvmw4JNaGXAGuBoAIa\nQQUEDQrYsKCigAgiQlzFRdfG/nRta1tR1KUJSBtABUVUQAFFERUJSEeKdEINLQGSkOT8/phJMi1k\nEmYmmcn7eZ48mXvuuXdeboY3J+eec64YY1BKKRVcQso6AKWUUt6nyV0ppYKQJnellApCmtyVUioI\naXJXSqkgpMldKaWCkCZ3pZQKQprclVIqCGlyV0qpIBRWVm8cFxdnmjRpUlZvr5RSAWnlypVHjDG1\niqtXZsm9SZMmpKSklNXbK6VUQBKRXZ7U024ZpZQKQprclVIqCGlyV0qpIKTJXSmlgpAmd6WUCkKa\n3JVSyl8sFmjSBEJCrN8tFp+9VZkNhVRKqQrFYoFBg+D0aev2rl3WbYDevb3+dsW23EUkSkR+F5E1\nIrJBRF5yUydSRD4RkW0islxEmng9UqWUCmTDhxcm9nynT1vLfcCTbpks4HpjTCugNdBNRK5yqvMQ\ncMwYcwHwLvCmd8NUSqkAlpxsbakDX7boxL4qdhNMd+/2yVsWm9yNVYZtM9z25fxU7R7AZNvrWUCS\niIjXolRKqUCVnAyjRwNwICaWJ2/+BxOu7FG4v3Fjn7ytRzdURSRURFYDh4CFxpjlTlUaAHsAjDE5\nwAkg1puBKqVUQBo7tuDltDbdyQ0J4cGVX1kLQkLgtdd88rYeJXdjTK4xpjXQEGgrIpc4VXHXSndu\n3SMig0QkRURSDh8+XPJolVIqkFgskJcHwJmwSCytu9Nl63Ianzho3Z+X55ObqVDCoZDGmOPAEqCb\n0669QCMAEQkDqgFH3Rw/zhiTaIxJrFWr2EXNlFIqsNndLP285XUcq1yNgSvm+OWtPRktU0tEqtte\nVwK6AH86VZsL9LO97gl8b4xxabkrpVSFYrtZmocw4coeXLp/K233bvDLW3vScq8H/CAia4EVWPvc\nvxaRl0XkNludCUCsiGwDhgHP+iZcpZQKAPmTlWxt3CXNrmB7bCMGrpjj2IedkOCzEIqdxGSMWQu0\ncVP+gt3rTOBu74amlFIByHmyEjDhytupm36Emzb/7Fj31CmfhaHLDyillDc5TVbaWKspy5q0pt/K\nrwjPy3Ws66Mx7qDJXSmlvGuX44OSJlzZg0rZmdy/eoFrXR+NcQdN7kop5V2hoQUvD0XXYG5CJ+5Z\nt5BqWU5dMJUr+2yMO2hyV0op77FYILew62Xq5TeTExJK/5S5jvViYmDcOJ+NcQddFVIppbzDYoEB\nAwo2z4RFMs02aanJ8f2OddPTfR6OttyVUsobhg6F7OyCTX9PWnKmyV0ppbwhLa3gZa6EMOHK27nk\nwDa/TVpypsldKaW8bOGF7dge25BHls92u/CWP2hyV0opb4iOBqwrJo5u15PGx/bTffMy13p2o2l8\nSZO7UkqdD4sF4uIKZpv+1uhS1tS/mId//5wwk+daP//Rej6mo2WUUqq03Cw1MOaqu4g7dYy71y92\nrBsSAo88AqNG+SU0bbkrpVRpOS01sKF2U35slkj/lLlE5dhGzojAtGnW8e9+SuygyV0ppUrHYnFZ\namBsu7uIzjpNnz/mFRYaYx0m6Wea3JVSqqTyu2Ps7KlWh6+bd+T+NQtclxqwGybpL5rclVKqpJy6\nYwA+uvIOQk0eD634soyCcqTJXSmlSsqpOyatUlU+vawLt29YQt0MN6302Fg/BVZIk7tSSpWExeJS\nNPmKW8kKi+CR32e7P2bkSB8H5UqTu1JKlYTTzdGMiEpMvvwWbti6nAvS9rrWHzLEp6s/FkWTu1JK\nlYTTzdEpbW7mRKUqPPrrp651hwzx6/BHe5rclVLKU05dMqfDIxnf9g6u3b6SVge2utYvo8QOmtyV\nUspzAwc6bE5v3Z2jlavx+C8zXeuWwU1Ue5rclVLKExYLZGYWbGaGhjO27Z1cvWsNifs2OdaNiCiT\nm6j2ik3uItJIRH4QkU0iskFEXKZaiUhnETkhIqttXy/4JlyllCojw4c7bH562Y0cjqnJY+5a7RMn\nlslNVHueLByWAzxpjFklIlWAlSKy0Biz0aneUmPMLd4PUSmlyoHduwteZoeEMeaqu0jcu4Grd69z\nrVvGiR08aLkbY/YbY1bZXqcDm4AGvg5MKaXKDYvFukaMzexLk0itWpvHfvnE9WEcZdzXnq9Efe4i\n0gRoAyx3s/tqEVkjIvNFpKUXYlNKqbJnsUD//gWbZ0NCGXXV3bRK3cK1O1Y51g0NLfO+9nweJ3cR\niQFmA08YY0467V4FxBtjWgEfAG6fCCsig0QkRURSDh8+XNqYlVLKf4YPh7NnCza/TOjEnup1eeyX\nmY6t9pAQmDy5XHTJgIfJXUTCsSZ2izHmc+f9xpiTxpgM2+t5QLiIxLmpN84Yk2iMSaxVq9Z5hq6U\nUn5gt45MroQw6qp7SDj4F0l//e5Yb8qUcpPYwbPRMgJMADYZY0YUUaeurR4i0tZ2Xv+vcamUUt7k\nNGnpy4RObI9tyOPOrfbY2HKV2MGz0TLtgb7AOhFZbSt7HmgMYIwZA/QEhohIDnAG6GWM3d0HpZQK\nRHbryJwNCWVk+/tIOPgXN275zbFeOelnt1dscjfG/AyuN4Sd6nwIfOitoJRSqlywW0fm80uuZ1eN\n+oyf9TIh2LVdy2GrHXSGqlJKFSs7JIz3r+lFq9TNrn3t5bDVDprclVLKPbv+9k8uu4F91eow7GeL\nazdGOWy1gyZ3pZRyz7bcQGZYBB9e04vEvRtcx7XHx5dBYJ7R5K6UUvksFoiLA5GCIZCW1t04WCWW\nYUunubbaX3vN7yF6ypPRMkopFfwsFujXD3JzC4pOh0cy+qq7uXrXGq5xXkMmOrrcdsmAttyVUspq\n8GCHxA4wpc0tHImuwZNLp7nWHzvWT4GVjiZ3pZRKToaMDIeijIhKjG13J9duX+m6XnsZPRe1JDS5\nK6UqNosFxoxxKR5/5e0cq1yNYT87zlIlKalMH5/nKU3uSqmKbfhwh+V8AY5UrsZHV95B983LaL1/\nS+GO0FBYtMjPAZaOJnelVMVm9xCOfB9efS+Z4ZE89dMUxx2TJ/spqPOnyV0pVbHVrOmwubtaHSxt\nunPP2u/429F9jnXLeT+7PU3uSqmKKznZYf0YgHc69iU0L5cnls1wrFuOJyy5o8ldKVUxWSwwerRD\n0frazfiyZWcGpMylTsbRwh0i5XrCkjua3JVSFdMjj7gUvdn5QaqfOckjy2c77hg8OKC6ZECTu1Kq\nIkpOhlOnHIqWxbdiadPLefTXz6iWZdsnYh3THgBDH53p8gNKqYolOdmlO8YAb3bqR/2Th+i76uvC\nHVOnBlyLPZ+23JVSFUcRE5a+ad6BtfUu4h9LLUTlFj4MO1ATO2hyV0pVJG4mLGWGhvNmpwdpfmgH\nd274oYwC8z5N7kqpisPNhKXJV9zKnup1+df34wk1eYU7YmP9GJj3aXJXSlUcThOWjlSuxofX3Mv1\n236nw641hTvCwsrt4/M8pcldKVUxdOniMmHpvfb3czo8iud/mFhYGBICkyYFdH87aHJXSlUEycmw\neLFD0Za4xkxv3Y0+f8zjgqN7C3dMmRLwiR08SO4i0khEfhCRTSKyQUSGuqkjIvK+iGwTkbUicrlv\nwlVKqVIYN86l6LXrBhCdfYahzssMBEFiB89a7jnAk8aYFsBVwKMikuBUpztwoe1rEDAapZQqL5ye\nsLSk6eX82CyRob/MpOaZk2UUlG8Vm9yNMfuNMatsr9OBTUADp2o9gCnG6jeguojU83q0SilVEsnJ\n1lmmdnIkhNeuf4j4Y6mOE5Yg4EfI2CtRn7uINAHaAMuddjUA9tht78X1F4BSSvmPm5moADNadWVr\nXDzP/fAxkbk5jjsDfISMPY+Tu4jEALOBJ4wxzn/HiJtDjHOBiAwSkRQRSTl8+HDJIlVKqZJw089+\nLKoK71zbl3a719F166+FO/LXkAmS/nbwMLmLSDjWxG4xxnzupspeoJHddkMg1bmSMWacMSbRGJNY\nq1at0sSrlFKecepnB3inYx/SI6P596Kxji3SqVMDcnGwc/FktIwAE4BNxpgRRVSbCzxgGzVzFXDC\nGLPfi3EqpVTJhDimt/W1mzG9dTf6rvqGFod3Fu4IDQ2qFns+T1aFbA/0BdaJyGpb2fNAYwBjzBhg\nHnATsA04DfT3fqhKKVUClSoVLOtrgBdvGEyNM+n842eLY71Bg/wfmx8Um9yNMT/jvk/dvo4BHvVW\nUEopVSoWCwwd6jIT9YuW17GyYQJvzRtZuFY7BOxa7Z7Q9dyVUsHBYoG+fV1WfUyPqMTrnfvTKnUz\nPdctKtwRHx+0iR10+QGlVLAYPNglsQO83/4+jkRX5+WFYwixH8QXYM9ELSlN7kqp4JCR4VK0LbYh\nH19xG/euXUirA1sLdyQlBeVNVHua3JVSgc9icSkywItdBlP5bCb//HFy4Y7oaFi0yKV+sNHkrpQK\nbBYL9HcdoPdlQmeWNWnNP3+cTKz9+jFjx/oxuLKjyV0pFdiGD4ezZx2KjkfF8Mr1A2md+ie9Vy9w\nrB/k3TH5NLkrpQLbrl0uRW92epDjlarwnwX/c7yJGh/vx8DKliZ3pVTgSk52KVrRIIEZrbvx0Io5\nJBzeUbijcuWgHyFjT5O7UipwOS0Olh0SxvCuj9LgxCGeWDa9cEd8vLVuBemSAZ3EpJQKVBaLy+Jg\nH7W9gy214pkw6yUqn82yFsbHw86d/o+vjGlyV0oFni5dXJ6Juqt6Xd6/phfdNy8j6a8VhTsqUFeM\nPe2WUUoFFjcPuzbA/90whPC8XF5cZNdVExtbobpi7GlyV0oFFjcP4fi85fX81OwKnvppCnUz7BYN\nC6InK5WUJnelVGBx6mc/FF2dl5MeJnHvBh5Y9U3hjujoCttqB03uSqlA4rTMgLU7Jpkz4ZG8Of/9\nwjHtIhVmJmpRNLkrpQKDm2UG5l3cnm8vvoZhSy387eg+a2FYmPWxeRW41Q46WkYpFSiGDnVYZuBo\npaq8cMMQLtu/hYErviis57QUQUWlyV0pVf5ZLC5PV3opaRAno6KxzBxJmMkro8DKL+2WUUqVbxYL\nDBjgULTob235smVn/v7LJzQ/Yre2TAVaO6Y4mtyVUuXb0KGQnV2weSIymuFdH6X5oR0M+W1WYT2R\nCjthyR1N7kqp8s2pO+bFGwaTVrkab897j4i8nMIdgwdX+Juo9jS5K6XKJ4sF4uIcir65uD1zWl7H\nY7/M5NKDfxXuGDIkqB92XRp6Q1UpVf5YLDBoEJw+XVB0KLoGw7s+SqvUzTz666eFdWNjNbG7UWzL\nXUQmisghEVlfxP7OInJCRFbbvl7wfphKqQpl6FCHxG6Ap7sPJTMsghHfjHAcHVOBlxg4F09a7pOA\nD4Ep56iz1Bhzi1ciUkpVbG6GPU5v1Y0lf0vkpYVjCicrgbU7RvvZ3Sq25W6M+Qk46odYlFLK+kxU\nOzur1+PV6wfScccq+tqvHaP97OfkrRuqV4vIGhGZLyIti6okIoNEJEVEUg4fPuylt1ZKBQ2LxeGZ\nqDkSwrBbhhGel8Nb80cWrh2TlKSJvRjeSO6rgHhjTCvgA2BOURWNMeOMMYnGmMRatWp54a2VUkEj\nORn69HEoGnX1Paxq0IJXvhtNvXS7rppFi/wcXOA57+RujDlpjMmwvZ4HhItIXDGHKaVUIYsFRo92\nKEpp0IL32t/HbRuXcNumHwt3hIb6ObjAdN7JXUTqiojYXre1nTPt3EcppZSdoUMdNk9ERjP01n/S\n4ORhXvv2f4j9zkGD/BpaoCp2tIyIzAA6A3Eishd4EQgHMMaMAXoCQ0QkBzgD9DLGGJ9FrJQKPnaj\nYwzwbPfHORhTk88sT1Ml+0xhPe1r91ixyd0Yc18x+z/EOlRSKaVKxmJxabXPbNWV+Re355klH9Nm\n/5bCHUlJ2tdeAjpDVSlVNvIfvmG3/vrW2Ea8lPQwHXb+wSPLP3esr4m9RHRtGaVU2XB6+EZmaDiP\n3fY00dmZjPh6ROGwR9ClfEtBk7tSyv/czEJ99fqB/Fm7Kf+d9x61Tx0r3FG5si7lWwqa3JVS/jd4\nsMPmnITOTLv8ZgYtn81121MKd4SEwLhxusRAKWhyV0r5V5cukJFRsLk1thHPdf07bfes558/OS1h\nNWWKJvZS0uSulPKfLl1g8eKCzVPhUQy+43miz57hg7lvEZ6XW1g3KUkT+3nQ0TJKKf+wWBwSuwGe\n7fYYO2rUZ9on/6JOht36hNHROjrmPGnLXSnlH0797NPa3MRXCZ14cuk0rtm9zrHu2LF+DCw4aXJX\nSvmHXT/76noX8XLSw1y/7XfHh1yD9clK2h1z3jS5K6X86kjlaiTf/iy1M44y4hun8eygT1byEk3u\nSinfsljAurYg2SFhJN/+HEcrVWXsF/+hemaGY11ttXuNJnellO84rdH+ctLD/N7oEt6c/z6XHPzL\nsW5EhLbavUiTu1LKNywWGDOmYHNGq65Mu/xmHlk+mx6bfnKsGxsLEydqq92LdCikUsr7LBaHFvvK\nBs154YbBXLt9JU//ONmxrq4Q7hPacldKeZdTV8yBmFgG3/48DU4c5oO5bxFq8grrRkSUQYAVg7bc\nlVLe49QVcyYskkfuGM7p8Cgsn/yLalmnHOtPnOjnACsObbkrpbxn+PCCbpY8hGG3DGNtvQt47+v/\nctGR3Y51p03TPnYf0uSulPKeXbsKXr597QPMv7g9w3+YyA3bfnesp0MefU6Tu1LKO5KTC15+eukN\njL76bnr/MY+HVsxxratDHn1O+9yVUufPbrXHXxpfxvNdH6XjjlX8e9FYxLludLS22v0g4FruxhiW\nb08rvqJSyj/sVnvcVrMhg+94nmZH9/G/OW84LuELEB6ui4L5ScAl909W7OHecb+xdOvhsg5FKQXw\nyCMAHK5cnQE9XyQi9ywTZr1E1ezTjvVCQuDjj7XV7ifFJncRmSgih0RkfRH7RUTeF5FtIrJWRC73\nfpiFbt+8lGYnD/L8O3M5/beLrK0GpZT/WSwQFwenTpERUYkBPV/kUEwNPpr9Co1OHnKsGxqqT1Xy\nM09a7pOAbufY3x240PY1CBh9/mEVITmZqH59ef2rEeypXpd34ztaJ0t06eKzt1RKuWGxwIABkJZG\ndkgYQ25/jo11mjFqzhu02b/Ftf7kyZrY/azY5G6M+Qk4eo4qPYApxuo3oLqI1PNWgAXyJ0cYQ7u9\nG7j/j/lMSOzB2roXWPv77O7UK6V8bPBgyM4mD+GfNz3B0qaX8/qCD7je/uHW+XTYY5nwRp97A2CP\n3fZeW5l32U2OAHh2ycfUOnWcZ7o9ztmQUBg9WrtolPKH5OSCB2/857oBfNmyM//8cTL3rHPzWLzQ\nUB32WEa8kdxdRjqB8+r7tooig0QkRURSDh8u4Q3R3Y6z26pmn+aV70axqU4zxrW901r44IOa4JXy\nJYvF2pACPrryDsa3vYMHU+aS/NtnrnVjYrQ7pgx5I7nvBRrZbTcEUt1VNMaMM8YkGmMSa9WqVbJ3\nadzYpejGbcu56c+fGdn+PrbVbAg5OQV37pVSXma30uNnlyTx2vUPcfOmn3hh8UeuLbyICEhP18Re\nhryR3OcCD9hGzVwFnDDG7PfCeR299prb4n8vGkN09hmevHkYORICp07pDValvM1upcevm3fgme6P\n03HHKvePyQNdEKwc8GQo5AzgV+BiEdkrIg+JyGARyX+U+TxgO7AN+AjwzZ3N3r0hKcmluPap47z6\n3SjW1L+IUVffYy1cvFgTvFLekpxc0BWz+G9X8sQtT5G4bxPjPn+NyNwcx7phYbogWDkhpowWyk9M\nTDQpKW7urBfH7oNm7/Fbn2LexR2YM/XJwsd36YdMqfNj9/9tWXwr+vd8keaHd2KZOZwq2Wcc60ZH\nF9xoVb4jIiuNMYnF1Qu4GaqMGuW2Bf/ywjHUPH2CYTcPIzM03Fo4YICfg1MqiNjdPE1p0IKBd/4f\nzY7uY8qnL7gmdtBlBcqZwEvuAIsWQVSUQ1H1zAzeXPA+W2rF825H21NgsrN1/LtSpTXY2vO6tu4F\n9L/739TNSGPqJ/9H9Uw3rXNdDKzcCczkDjB+vEvRddtXct/q+Yxrewe/NL7UWqjj35UqOYsFMjJY\nU/dC+tz7KlUzM7DMHE6t08dd64poq70cCtzkXsQN1n99P4GmR/fxj1ue4milqtbCPn2gShVN8kp5\nauBA/qh3EX3ufYVqmRl8Mv1Z6qcfcV936lRttZdDgZvcwdo945Tgo89m8sHctzhWqSpPdx9aOEgr\nI8PaB68JXqmiWSwQE8OqmvE8cO8r1DiTzszpz9HwZBGTDocM0cReTgV2cgdrgo+JcShqeWgHzy2Z\nyKIL2zHpilsLd2Rnw9Chfg5QqQBhG8u+slojHrjnFWqePsHMGc/RIL2IxJ6UZB3goMqlwE/uYF1Q\nLDTUoejBlV/RZetyXu88gPW1mxXuSEvTm6xKObONjElp0IIH7nmZWqeOMXPGc0V3xQwZYm1YqXIr\nOJJ7797WNSzsCPDW/JHUOHOSx297moyISoU7R4/WSU5K5bMtK/BTkzb0vecV6mQcZcaM56mXXsQT\nz4YM0RZ7AAiO5A7WBD9tmkNRzTMnGfnV2+yqUc+x/x10mWClwJrYH3iAeRe356GeL9DkWCqfTH+W\nuhma2ANd8CR3cJvgr9qznmd+nMS85h0Yf+UdjvV1mKSqyCwW6NePT1sm8ffbnqbV/i3MnPGc++GO\nYB3Lrok9YARXcgdrgh8yxKHo4d+/oPvmZbzR+UF+bXSpY/2+fTXBq4onORn69mX85bfy9E1D6bBz\nNVM+fYFqWaeKPkbHsgeU4EvuYG1d2CV4Ad6e9x7xx1J5rMfTHIiJLaxrjHUcvCZ4VVFYLJgxY3in\nQ29evX4gN/+5lPGzX6Hy2ayij0lK0iGPASY4kztYE7zdomgx2WcY+8V/OB0eRfLtz5IVGuZYX8fA\nqwribPKjPNPtMT64phe91nzL+3PfJiIvp+gDkpJ0ZEwACt7kns9uktOFaXt4e957rGrQgue6PuZ4\ng1XHwKsKIL3J3xjQ7Uk+vexGHl82ndcXfECoySv6AB3yGLCCP7kvWgQJCQWbN29exhM/W/j80iTG\ntLvLsW5amrbeVdA62L0H91z3BL/Et+LN+SMZ9vN0t8/IBKwL802bpjdQA1hY8VWCwIYN1nHtixcD\nMHTZDP6q2ZC3OvWj2dF9dN36W2HdPn1g2TL9UKugsnnCDPo3vZ0TkTFMnPUSnXasOvcBZ9ws6asC\nSvC33PPZrUMjwNvzR3LZ/q3845Yn2VC7qWNdneSkgsiyTj3ouS6EHAnlk+nPFp/YnUabqcBUcZI7\nOCT4qJxsPvr8VaplZjDwrhfYXyXWsa5OclIBzhjDlA5380C7h6iXnsYXU5/ikkPbz31QQoL+1Rok\nKlZyB4c++NqnjjFh1sukR0bz4N0vcSIy2rHu6NGa4FVAys7JY/h9L/BChwfpvH0ls6c9VfQCYPmS\nkqxdmCooVLzkDtYPcGQkAAmHdzDu81fZXrMBD9/1f4WP6MunXTQqwKRlZNHn9a+Y3uQqhvz6GeM+\nf9X9Y/HyhYRYb57qqJigUjGTO8CECQUvr9m9lhFfj+D3RpfwxK1PkStOl2XxYk3wKiBs2n+SHi/P\nZfWJPN776r8889Pkcw91BJgyRScoBaGKm9zz16ER62CwW/9cyguLxrHg4va82OURxzHwYE3wDRr4\nPUylPPXVmlTu+u9Csk+d4TPLM9y+cUnxB+nDNoKWR8ldRLqJyGYR2SYiz7rZ/6CIHBaR1bavgd4P\n1Qd694a8vIKbrANWzuWR32Yx7fKbeaNzf9cEn5qqCV6VO9k5efx77gYem/EHLQ5u56sp/6DVga3F\nH6grPAa1Yse5i0go8D/gBmAvsEJE5hpjNjpV/cQY83cfxOh7ixZZk3ZqKs/+OInTEVGMbXcXkTlZ\nDPt5umPd1FQID4dJk7TFo8pc6vEzPDp9FX/sPs5DK+bw7JKPCc/LPfdBoaHW5x/o5zeoeTKJqS2w\nzRizHUBEZgI9AOfkHtj27YPwcCQnh5cWjiUrLIL3299PZM5ZHv3tM8e6OTk62UmVuaVbDzN00m9k\nncnif/Pe4+bNyzw7UBN7heBJt0wDYI/d9l5bmbO7RGStiMwSkUZeic7fJk0CIATD6ws+pMeGJbzd\nqR/jE3u4r6/rwasykJObx7sLt/DAhOXEHdzD3MlPeJ7YtY+9wvCk5e5u+Qnn7uivgBnGmCwRGQxM\nBq53OZHIIGAQQOPGjUsYqh/07m1tjY8eTajJ451vRnA2NIxXkx7mbGgYQ5bPdj2mT5/CY5XysT1H\nT/PEJ6tZuesYd274gVe//d+5l+q1N22afk4rEE9a7nsB+5Z4QyDVvoIxJs0Yk/8J+wi4wt2JjDHj\njDGJxpjEWrVqlSZe3xs1yvqfIDqaMJPHyK/e5raNS3izc39GdLjf9SYrWBO8TnZSPjZ3TSo3jVzK\nlgPpjFw6nhFfj/AssUdEaGKvgDxJ7iuAC0WkqYhEAL2AufYVRKSe3eZtwCbvhVgGeveGjAwYMoTw\nvFze/XoE96z9jvfb389/rhvgPsFrF43ykYysHJ76bA2Pz/iDC0IymTeyHz1+mePZwWFhMHGiJvYK\nqNhuGWNMjoj8HfgWCAUmGmM2iMjLQIoxZi7wuIjcBuQAR4EHfRiz/9huloaOHs0b8z+g0tksPmp7\nJ6fDo3h54RjXySF6k1V52YqdR3nqszXsOXqax7O28vhbTxJW3KSkfPXrWwcKqApJjHHbDvW5xMRE\nk5KSUibvXSrh4ZicHN7s1I8xV91N182/MPLr/xKVk+1aV/9TqfOUeTaX/367mQnLdtCgeiXemfky\n7Vb/6PkJQkOto7pU0BGRlcaYxOLqVdwZqiU1aRICPPvjZF5cNJbvLrqK3ve+yrGoKq51U1Ot63Vo\nN40qhZW7jnHTyKWM/3kHvdv9GAitAAARrklEQVQ15ttRA0uW2EWswx1VhabJ3VN2yxX0X/kVo+a8\nwbq6F3BXn7fYU62Oa/38B2/rjVblocyzufxn3ibuHvMLWTl5WE79xqt3XEb07h2enyQ2FqZO1T52\npd0ypWKbzbqiQQID7/o/wvJyGfPFf7hyXxHzusLCdEarOqeftx7hX3PWsTPtNPe1bczzY56hysL5\nJTuJjoipELRbxpf27YPq1bly30ZmT/sn1TIzuP++15jRqqv7+vkzWrUVr5wcTs9i6Mw/6DNhOQCW\nge14fdFoTezqvGlyL61jxyAhgQuO7uWLqU9yza41PNftMV7oMpizIaHuj9G14ZVNXp5h+vLdJL2z\nhPnrDvB40oUsqJtK+5YNrJ8TT4loYlduaXI/Hxs2wLRpVMs6xcRZL/PI8tlMueIW+tz7Koeiq7s/\nZvFiaNnSv3GqcmXd3hPcPfZXnv9iHS3qVWXe0I4MezOZqAf6QLab0VdFiYnR/nVVJO1z95YaNeD4\ncb5I6Mxz3f5OTNYZ3vv6v3TYtcZ9/YQEfaRZBXMoPZO3F2xm1qq9xEZH8Ey35vS8oiHSsKF1hFVJ\n6HK9FZb2ufubrZvmjo1LmDtlGDUyT9L33ld4p2Mfcpyf7ASwcaP1RqsOlwx6WTm5jPnxL67/74/M\nWb2Phzs24/unOnN3YiOkZk1N7MontOXubV26wOLFnA6P5MUug/nsshtou3sd7349ougHFCcl6fMr\ng5AxhgXrD/DGgj/ZlXaaLi1qM/zmBJrGRVtvrpekbx30rz0FaMu97CxaBEOGUPlsFm/PH8mIr99h\nfd0L6PbQh3x6aRf369IsXmy9MaajaYLGsm1H6PG/ZQyxrCIiNIQpA9oyvt+VNP12jvUvtpIm9vr1\nNbGrEtGWu69YLDBgAGRns7taHZ666Ql+b3wpSdt+5/UFH1D71DH3x+nSBQFtzZ7jvPXtnyzblkaD\n6pV4osuF3Hl5Q0JDpHStddC/7JQDT1vumtx9zdZNk4fwceKtvHVtP6Jysnlh8UfcueF7t4vlI6Kj\nIALMxtSTvL94Kws2HKBmdASPXncBvds1Jio81OEXfYno5Dflhib38sSW4AH+qtmAf970BKsatKDd\n7nW8+t0oLkzb4/447WMt99bsOc4H329l0aZDVIkMo3+HpjzcsSlVosKtFex+9h7TX+7qHDS5lzcW\nS8FTm/IQZra6kTc7PcipiEoMXPEFj/8y0/2DF/Q/ermUsvMo73+/jZ+2HKZapXAe6tCUftc0oVql\n8MJKLVtaR0WVVBn9n1SBQZN7eWX3Hz6tUlVev64/sy69gXonD/Pk0qncuf4HQtzddtVWfJnLzTN8\nt+EAE37eQcquY8RGRzCwYzP6Xh1PTKTdoxFK01rPp7NNVTE0uZdnFgv06we5uQCsaJDAK0kDWVvv\nIloc3M7zSybScedq98fqzTW/S888y6cpe5n0yw72HD1Do5qVGNC+Kb2ubEylCLulJuz+OiuxmBgY\nM0YTuyqWJvdAYDd6Ig/hqxYdefvaB9hbvS4dd6xi2NJptNm/xf2xOpHF57YdymDG77v5dMUe0rNy\nuLJJDR7q0JQbEuoWjn4ZN67gl3Sp6c9SlYAm90BhsUDfvgX9rFmhYUy9/BY+vPoejleqSscdq3h8\n2cyilxPWxOBVmWdz+XbDAaYv383yHUcJCxG6X1qPgR2a0qqR3XpB59P1ki8qCsaP19a6KhFN7oHG\nKVlkRFRiWuub+KjtHaRFV+fqXWt4ZPlsrt3xh2uffGio9ck7miRK7c8DJ5mVspfZq/Zy7PRZGtes\nzH1tG9PziobUqhLpWLm049Xz6RBHdR40uQcip1Y8wOnwSKa36sa4tndyqEoszdL20H/lV9y5/nui\nz2Y6Hq9Jo0T2nzjDl6tTmfPHPv48kE5YiHBjyzrc3zaea/4WS0iI0ywEp3slpaL3TNR50uQeyNy0\nDLNDwvimeQc+TryNtfUuokpmBj3XL+butYtIOOz0GDZtyRfpcHoWizYd5MvV+1i+4yjGQJvG1bm9\ndQNuvqwecTGRrgd5I6nrL17lJZrcg4GbcdIGWFW/OR8n3sZ3F15Ndlg4lxzYxt3rFtFj4xKqZ2Y4\nnkP75NmVdorvNhzku40HSNl1DGOgWVw0PVo3oEfr+jSJi3Z/YGlnltrTX7TKy7ya3EWkGzASCAXG\nG2PecNofCUwBrgDSgHuNMTvPdU5N7iVge2ars2NRVfgyoROfXdqFDXUvICw3h2t2raH7ll+4ccuv\nxJ45WVi5AnUHZJ7NZeWuYyzdeoQlmw/x54F0AFrUq0rXlnW4MaEuLepVQcTt4g/eaamD/mJVPuG1\n5C4iocAW4AZgL7ACuM8Ys9GuTjJwmTFmsIj0Au4wxtx7rvNqci+hYm7ibajdlLktOrHg4mvYVaM+\nIXm5tNuznqS/VtBxxx9cdGSXdR2bIOweyM0zbD6Qzi9/HWHp1iMs35FG5tk8wkKEK+JrcENCHbq2\nrEujmpWLPok3Wun5dMKZ8iFvJvergX8bY7ratp8DMMa8blfnW1udX0UkDDgA1DLnOLkm91IqZqKM\nATbWbsqCi9uz4KKr2RoXD0Dt9DQ67vyDDjtXk7hvEw1PHEQCtDWfnnmW1XuOs3LXMVbuOsYfu4+T\nkZUDwAW1Y+hwQRzXXhRHu6axRNvPHM1nscDw4bBrl3cDi46GjIzi6yl1HryZ3HsC3YwxA23bfYF2\nxpi/29VZb6uz17b9l63OkaLOq8n9PHk4zjq1Shw/N2nDT03b8HOT1hyvVBWAuIxjtEn9k8tT/+Sy\nA9u46ObOxH34btFdFWXAGMOh9Cw27j/JxtSTbNx/kk37T7LjyCmMsS6707xuVa6Ir05ifE3aNq1J\n/eqVzn3S8x3GWJSQEJgyJaj+IlLlk6fJ3U2zxvVcbsqcfyN4UgcRGQQMAmjcuLEHb62KlN/iLiZZ\n1U8/wj3rFnLPuoXkSgh/1opnVf3m/NGgBavqN2fhRVcX1K05dAYXH97JRVF5NBpwP41qVqZhjUo0\nrFHZcUEsLzqVlcOh9CwOnsxk77Ez7Eo7xY4jp9iVdpqdR06RbmuRAzSqWYkWdatyW6v6XBFfg9aN\nqheuvliU5GTrtH5fDhzQpQNUOaTdMsGilC3StEpV+bN2UzbHxbOlVjx/1opnW2xjMiId+6crR4RS\nMzqi8KtyBDFRYUSFhxIZFlLwHSDPGHLz8r8bTmXnkJGZQ0aW9Xt6Zg5HTmVx6GRWQXdKvhCBhjUq\nEx9bmaZx0TSLiyahfjWa16tC1eISuT1v3RQtSmwsjBypCV35nTe7ZcKw3lBNAvZhvaF6vzFmg12d\nR4FL7W6o3mmMuedc59Xk7iNeSGoGOB5Vhb3VarO3Wh32VK/DwZhYjlWqSlrlqhyNv4CjsfU4lZ1D\n5tlcsnLyztkwjggLoUpkGDFRYVSJCiM6Ioy4mEhqVYmkTtUoatu+16seRaMalYkIK+XTH33V5ZJP\nlwtQ5YC3h0LeBLyHdSjkRGPMayLyMpBijJkrIlHAVKANcBToZYzZfq5zanL3A2+sf+IBA2QPeZTM\nd94FIDRECBUhJARCRQgL9cGjeku7VnppaLeLKkd0EpMq5OsWrSeioiArCxo3htdeKzpRWiwwdCik\npfk3Pmea0FU5pclduefPFm+g0W4XFQA8Te4++HtZlWsbNlhHjkybBhERZR1N+RAfb70eZ85oYldB\nQ5N7RdW7t7WbxBjrV1JSWUfkXzEx1oRuDOzcqUldBR1N7spq0aLCRD9kSFlH4zuxsdaknp6uCV0F\nNU3uytWoUYWJPr8LJzS0+OPKk6iowpa5/deRI5rUVYWgyV0Vr3dvyMlxTJLlqXWflOSaxLX/XFVw\nmtxV6Ti37p1b+vHx3nkfEesvkqLey5iAXPxMKV/zZG0ZpUqmd29tNStVxrTlrpRSQUiTu1JKBSFN\n7kopFYQ0uSulVBDS5K6UUkGozBYOE5HDQGkfYhkHFPkIvzJWXmPTuEpG4yoZjatkzieueGNMreIq\nlVlyPx8ikuLJqmhlobzGpnGVjMZVMhpXyfgjLu2WUUqpIKTJXSmlglCgJvdxZR3AOZTX2DSuktG4\nSkbjKhmfxxWQfe5KKaXOLVBb7koppc6h3CZ3EblbRDaISJ6IFHlXWUS6ichmEdkmIs/alTcVkeUi\nslVEPhERrzxTTkRqishC23kXikgNN3WuE5HVdl+ZInK7bd8kEdlht6+1v+Ky1cu1e++5duVleb1a\ni8ivtp/3WhG5126fV69XUZ8Xu/2Rtn//Ntv1aGK37zlb+WYR6Xo+cZQirmEistF2fRaLSLzdPrc/\nUz/F9aCIHLZ7/4F2+/rZfu5bRaSfN+PyMLZ37eLaIiLH7fb55JqJyEQROSQi64vYLyLyvi3mtSJy\nud0+714vY0y5/AJaABcDS4DEIuqEAn8BzYAIYA2QYNv3KdDL9noMMMRLcb0FPGt7/SzwZjH1awJH\ngcq27UlATx9cL4/iAjKKKC+z6wVcBFxoe10f2A9U9/b1Otfnxa5OMjDG9roX8IntdYKtfiTQ1Hae\nUD/GdZ3dZ2hIflzn+pn6Ka4HgQ/dHFsT2G77XsP2uoY/Y3Oq/xgw0Q/X7FrgcmB9EftvAuYDAlwF\nLPfV9Sq3LXdjzCZjzOZiqrUFthljthtjsoGZQA8REeB6YJat3mTgdi+F1sN2Pk/P2xOYb4w57aX3\nL0pJ4ypQ1tfLGLPFGLPV9joVOAQUO0mjFNx+Xs4R7ywgyXZ9egAzjTFZxpgdwDbb+fwSlzHmB7vP\n0G9AQy+993nFdQ5dgYXGmKPGmGPAQqBbGcZ2HzDDi+/vljHmJ6yNuaL0AKYYq9+A6iJSDx9cr3Kb\n3D3UANhjt73XVhYLHDfG5DiVe0MdY8x+ANv32sXU74Xrh+o1259k74pIpJ/jihKRFBH5Lb+riHJ0\nvUSkLdaW2F92xd66XkV9XtzWsV2PE1ivjyfH+jIuew9hbf3lc/cz9Wdcd9l+PrNEpFEJj/V1bNi6\nsJoC39sV++qaFaeouL1+vcr0YR0isgio62bXcGPMl56cwk2ZOUf5ecfl6Tls56kHXAp8a1f8HHAA\nawIbBzwDvOzHuBobY1JFpBnwvYisA066qVdW12sq0M8Yk2crLvX1cvcWbsqc/50++UwVw+Nzi0gf\nIBHoZFfs8jM1xvzl7ngfxPUVMMMYkyUig7H+1XO9h8f6OrZ8vYBZxphcuzJfXbPi+O3zVabJ3RjT\n5TxPsRdoZLfdEEjFumZDdREJs7W+8svPOy4ROSgi9Ywx+23J6NA5TnUP8IUx5qzduffbXmaJyMfA\nU/6My9btgTFmu4gsAdoAsynj6yUiVYFvgH/Z/lzNP3epr5cbRX1e3NXZKyJhQDWsf2Z7cqwv40JE\numD9hdnJGJOVX17Ez9QbiarYuIwxaXabHwFv2h3b2enYJV6IyePY7PQCHrUv8OE1K05RcXv9egV6\nt8wK4EKxjvSIwPpDnGusdyh+wNrfDdAP8OQvAU/MtZ3Pk/O69PPZElx+P/ftgNu76r6IS0Rq5Hdr\niEgc0B7YWNbXy/az+wJrX+RnTvu8eb3cfl7OEW9P4Hvb9ZkL9BLraJqmwIXA7+cRS4niEpE2wFjg\nNmPMIbtytz9TP8ZVz27zNmCT7fW3wI22+GoAN+L4F6zPY7PFdzHWG5S/2pX58poVZy7wgG3UzFXA\nCVsDxvvXyxd3jL3xBdyB9bdZFnAQ+NZWXh+YZ1fvJmAL1t+6w+3Km2H9z7cN+AyI9FJcscBiYKvt\ne01beSIw3q5eE2AfEOJ0/PfAOqxJahoQ46+4gGts773G9v2h8nC9gD7AWWC13VdrX1wvd58XrN08\nt9leR9n+/dts16OZ3bHDbcdtBrp7+fNeXFyLbP8P8q/P3OJ+pn6K63Vgg+39fwCa2x07wHYdtwH9\nvRmXJ7HZtv8NvOF0nM+uGdbG3H7b53kv1vsjg4HBtv0C/M8W8zrsRgJ6+3rpDFWllApCgd4to5RS\nyg1N7kopFYQ0uSulVBDS5K6UUkFIk7tSSgUhTe5KKRWENLkrpVQQ0uSulFJB6P8B+sKs+bZBGiYA\nAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "\n",
    "fig1 = plt.figure(1)\n",
    "ax = fig1.add_subplot(111)\n",
    "fig2 = plt.figure(2)\n",
    "bx = fig2.add_subplot(111)\n",
    "#####################################################################\n",
    "# 将图像移到坐标原点\n",
    "\n",
    "# ax.spines['right'].set_color('none')   # 将图像右边的轴设为透明\n",
    "# ax.spines['top'].set_color('none')     # 将图像上面的轴设为透明\n",
    "# ax.xaxis.set_ticks_position('bottom')    # 将x轴刻度设在下面的坐标轴上\n",
    "# ax.yaxis.set_ticks_position('left')         # 将y轴刻度设在左边的坐标轴上\n",
    "# ax.spines['bottom'].set_position(('data', 0))   # 将两个坐标轴的位置设在数据点原点\n",
    "# ax.spines['left'].set_position(('data', 0))\n",
    "# # plt.xticks(np.arange(-6, 6))\n",
    "# # plt.yticks(np.arange(-6, 6))\n",
    "# plt.axis('equal')\n",
    "######################################################################\n",
    "# 超参数定义\n",
    "e = 0.5       # 学习率\n",
    "m = 8         # minibatch大小\n",
    "n = 500       # 数据大小的一半\n",
    "EPS = 0.0001   # 精度\n",
    "c = 2         # 模型容量\n",
    "\n",
    "\n",
    "def generate(n):\n",
    "    # n: 数据大小的一半\n",
    "    w = 2\n",
    "    p = []  # point\n",
    "    # point = [[]]\n",
    "    for i in range(-n, n):\n",
    "        y_temp = w * i * i / (n * n) + i / n\n",
    "        if(i < 40 and i > -40):\n",
    "            y_temp = y_temp + 0.8 * y_temp * random.random() - 0.4 * y_temp\n",
    "        else:\n",
    "            y_temp = y_temp + 0.06 * y_temp * random.random() - 0.03 * y_temp\n",
    "        p.append([i / n, y_temp])\n",
    "    return p\n",
    "\n",
    "\n",
    "def draw_error(p):\n",
    "    # p: 产生的数据\n",
    "    x = []\n",
    "    y = []\n",
    "    for i in range(len(p)):\n",
    "        x.append(p[i][0])\n",
    "        y.append(p[i][1])\n",
    "        # ax.plot(p[i][0], p[i][1], \"ro\")\n",
    "    ax.plot(x, y)\n",
    "\n",
    "\n",
    "def draw_fit(p, w, n, c):\n",
    "    # p: 产生的数据\n",
    "    x = []\n",
    "    y = []\n",
    "    for i in range(len(p)):\n",
    "        bx.plot(p[i][0], p[i][1], \"ro\")\n",
    "\n",
    "    for i in range(-n, n):\n",
    "        x.append(i / n)\n",
    "        t = [0 for x in range(c + 1)]\n",
    "        y_sum = 0\n",
    "        for j in range(c + 1):\n",
    "            t[j] = w[j] * (i / n)**(c - j) + t[j]\n",
    "            y_sum = y_sum + t[j]\n",
    "        y.append(y_sum)\n",
    "    bx.plot(x, y)\n",
    "\n",
    "\n",
    "def gen_minibatch(p, m, n):\n",
    "    # p: 产生的数据\n",
    "    # m: minibatac大小\n",
    "    # n: 数据大小的一半\n",
    "    batch = []\n",
    "    for i in range(m):\n",
    "        j = random.randint(-0.6 * n, 0.6 * n)\n",
    "        batch.append(p[j])\n",
    "    return batch\n",
    "\n",
    "\n",
    "def gen_testbatch(p, m, n):\n",
    "    batch = []\n",
    "    for i in range(-n, int(-0.4 * n)):\n",
    "        batch.append(p[i])\n",
    "    for i in range(int(0.4 * n), n):\n",
    "        batch.append(p[i])\n",
    "    \n",
    "    return batch\n",
    "\n",
    "# 求得一次梯度，并返回梯度，但是不更新w\n",
    "\n",
    "# def grad(batch, w, c):\n",
    "#     grad_w = []\n",
    "#     for j in range(len(batch)):\n",
    "#         #   求J = 1/m*sum((y-yt)*x(i))\n",
    "#         #   先求y，再减yt，\n",
    "#         y = 0\n",
    "#         for i in range(c + 1):\n",
    "#             y = y + w[i] * batch[j][0]**i\n",
    "#         y = y - batch[j][1]\n",
    "\n",
    "\n",
    "def grad1(batch, w):\n",
    "    # batc：数据集\n",
    "    # w：参数向量\n",
    "    # print(len(batch))\n",
    "    # print(len(w))\n",
    "    # print(batch[0][0])\n",
    "    w0 = 0\n",
    "    w1 = 0\n",
    "    m = len(batch)\n",
    "    for i in range(m):\n",
    "        # batch是二维list，batch[i][0]是横坐标，batch[i][1]是y\n",
    "        temp = w[0] * batch[i][0] + w[1] - batch[i][1]\n",
    "        w1 = w1 + temp\n",
    "        w0 = w0 + temp * batch[i][0]\n",
    "        # print(batch[i])\n",
    "        # print(temp)\n",
    "        # print(w0, w1)\n",
    "        # print(\"========\")\n",
    "    grad_w = [w0 / m, w1 / m]  # 梯度\n",
    "    return grad_w\n",
    "\n",
    "\n",
    "def grad2(batch, w):\n",
    "    # batc：数据集\n",
    "    # w：参数向量\n",
    "    w0 = 0\n",
    "    w1 = 0\n",
    "    w2 = 0\n",
    "    m = len(batch)\n",
    "    for i in range(m):\n",
    "        temp = w[0] * batch[i][0] ** 2 + w[1] * batch[i][0] + w[2] - batch[i][1]\n",
    "        w2 = w2 + temp\n",
    "        w1 = w1 + temp * batch[i][0]\n",
    "        w0 = w0 + temp * (batch[i][0] ** 2)\n",
    "\n",
    "    grad_w = [w0 / m, w1 / m, w2 / m]\n",
    "    return grad_w\n",
    "\n",
    "\n",
    "def grad3(batch, w):\n",
    "    # batc：数据集\n",
    "    # w：参数向量\n",
    "    m = len(batch)\n",
    "    grad_w = [0, 0, 0, 0, 0, 0]\n",
    "    for i in range(m):\n",
    "        t4 = batch[i][0]  # x的1次方\n",
    "        t3 = t4 * t4  # x的2次方\n",
    "        t2 = t3 * t4  # x的3次方\n",
    "        t1 = t2 * t4  # x的4次方\n",
    "        t0 = t1 * t4  # x的5次方\n",
    "        temp = w[0] * t0 + w[1] * t1 + w[2] * t2 + w[3] * t3 + w[4] * t4 + w[5] - batch[i][1]\n",
    "\n",
    "        grad_w[5] = grad_w[5] + temp\n",
    "        grad_w[4] = grad_w[4] + temp * t4\n",
    "        grad_w[3] = grad_w[3] + temp * t3\n",
    "        grad_w[2] = grad_w[2] + temp * t2\n",
    "        grad_w[1] = grad_w[1] + temp * t1\n",
    "        grad_w[0] = grad_w[0] + temp * t0\n",
    "\n",
    "    grad_w = [x / m for x in grad_w]\n",
    "    return grad_w\n",
    "\n",
    "\n",
    "#  更新梯度，e为更新间隔\n",
    "def updata_w(e, w, grad_w):\n",
    "    # print(w)\n",
    "    for i in range(len(w)):\n",
    "        w[i] = w[i] - e * grad_w[i]\n",
    "\n",
    "    # print(w)\n",
    "    return w\n",
    "\n",
    "\n",
    "def eps1(batch, w):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    # temp = [0 for x in range(c + 1)]\n",
    "    for i in range(len(batch)):\n",
    "        y = w[0] * batch[i][0] + w[1]\n",
    "        # for j in range(c + 1):\n",
    "        #     # print(j)\n",
    "        #     # print(i)\n",
    "        #     temp[j] = w[j] * batch[i][0]**j\n",
    "\n",
    "        #     y = y + temp[j]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)\n",
    "\n",
    "\n",
    "def eps2(batch, w):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    # temp = [0 for x in range(c + 1)]\n",
    "    for i in range(len(batch)):\n",
    "        y = w[0] * batch[i][0]**2 + w[1] * batch[i][0] + w[2]\n",
    "        # for j in range(c + 1):\n",
    "        #     # print(j)\n",
    "        #     # print(i)\n",
    "        #     temp[j] = w[j] * batch[i][0]**j\n",
    "\n",
    "        #     y = y + temp[j]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)\n",
    "\n",
    "\n",
    "def eps3(batch, w):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    # temp = [0 for x in range(c + 1)]\n",
    "    for i in range(len(batch)):\n",
    "        y = w[0] * batch[i][0]**5 + w[1] * batch[i][0]**4 + \\\n",
    "            w[2] * batch[i][0]**3 + w[3] * batch[i][0]**2 + \\\n",
    "            w[4] * batch[i][0]**1 + w[5]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)          \n",
    "\n",
    "# def test_eps2(testbatch, w):\n",
    "#     error = 0\n",
    "#     y = 0\n",
    "#     # temp = [0 for x in range(c + 1)]\n",
    "#     for i in range(len(testbatch)):\n",
    "#         y = w[0] * testbatch[i][0]**2 + w[1] * testbatch[i][0] + w[2]\n",
    "#         # for j in range(c + 1):\n",
    "#         #     # print(j)\n",
    "#         #     # print(i)\n",
    "#         #     temp[j] = w[j] * batch[i][0]**j\n",
    "\n",
    "#         #     y = y + temp[j]\n",
    "#         error = error + (y - testbatch[i][1])**2\n",
    "#     return error / len(testbatch)\n",
    "\n",
    "\n",
    "def eps(batch, w, c):\n",
    "    error = 0\n",
    "    y = 0\n",
    "    for i in range(len(batch)):\n",
    "        temp = [0 for i in range(c + 1)]\n",
    "        for j in range(c + 1):\n",
    "            print(\"j:{}\".format(j))\n",
    "            print(\"i:{}\".format(i))\n",
    "            temp[j] = w[j] * batch[i][0]**(c - j)\n",
    "            y = y + temp[j]\n",
    "        error = error + (y - batch[i][1])**2\n",
    "    return error / len(batch)\n",
    "\n",
    "# 产生数据\n",
    "p = generate(n)\n",
    "testbatch = gen_testbatch(p, m, n)\n",
    "train_pic = []\n",
    "test_pic = []\n",
    "# w = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n",
    "# # print(p)\n",
    "# # 产生minibatach\n",
    "# # minibatch = gen_minibatch(p, m, n)\n",
    "# draw(p)\n",
    "# plt.show()\n",
    "# # # print(minibatch)\n",
    "# for i in range(1000):\n",
    "#     grad_w = grad3(p, w)\n",
    "#     w = updata_w(e, w, grad_w)\n",
    "# print(minibatch)\n",
    "# draw(minibatch)\n",
    "\n",
    "# 用线性拟合\n",
    "\n",
    "# 定义参数初值\n",
    "# w = [0.1, 0.1]\n",
    "\n",
    "# for i in range(1000):\n",
    "#     # 产生minibatach\n",
    "#     minibatch = gen_minibatch(p, m, n)\n",
    "#     train_error = eps1(minibatch, w)\n",
    "#     test_error = eps1(testbatch, w)\n",
    "#     train_pic.append([i, 50 * train_error])\n",
    "#     test_pic.append([i, 50 * test_error])\n",
    "#     if(train_error < EPS):\n",
    "#         break\n",
    "#     # 求梯度\n",
    "#     grad_w = grad1(minibatch, w)\n",
    "#     # print(grad_w)\n",
    "#     # 更新梯度\n",
    "#     w = updata_w(e, w, grad_w)\n",
    "\n",
    "\n",
    "# 用二次函数\n",
    "# 定义参数初值\n",
    "# w = [0.5, 0.5, 0.5]\n",
    "\n",
    "# for i in range(1000):\n",
    "#     # 产生minibatach\n",
    "#     minibatch = gen_minibatch(p, m, n)\n",
    "#     train_error = eps2(minibatch, w)\n",
    "#     test_error = eps2(testbatch, w)\n",
    "#     train_pic.append([i, 50 * train_error])\n",
    "#     test_pic.append([i, 50 * test_error])\n",
    "#     # print(error)\n",
    "#     if(train_error < EPS):\n",
    "#         break\n",
    "#     # 求梯度\n",
    "#     grad_w = grad2(minibatch, w)\n",
    "#     # print(grad_w)\n",
    "#     # 更新梯度\n",
    "#     w = updata_w(e, w, grad_w)\n",
    "\n",
    "\n",
    "# 用五次函数\n",
    "# 定义参数初值\n",
    "w = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n",
    "\n",
    "for i in range(2500):\n",
    "    # 产生minibatach\n",
    "    minibatch = gen_minibatch(p, m, n)\n",
    "    train_error = eps3(minibatch, w)\n",
    "    test_error = eps3(testbatch, w)\n",
    "    train_pic.append([i, 50 * train_error])\n",
    "    test_pic.append([i, 50 * test_error])\n",
    "    # print(error)\n",
    "    if(train_error < EPS):\n",
    "        break\n",
    "    # 求梯度\n",
    "    grad_w = grad3(minibatch, w)\n",
    "    # print(grad_w)\n",
    "    # 更新梯度\n",
    "    w = updata_w(e, w, grad_w)\n",
    "\n",
    "# 输出最终拟合的w，从左到右降次排列\n",
    "print(w)\n",
    "# 画训练次数和误差大小关系图\n",
    "\n",
    "draw_error(train_pic)\n",
    "draw_error(test_pic)\n",
    "# plt.show()\n",
    "# 画拟合曲线\n",
    "\n",
    "draw_fit(p, w, n, 5)\n",
    "\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
